//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Karwos\documents\visual studio 2015\Projects\JFK_PROJEKT\JFK_PROJEKT\DateCalculator.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JFK_PROJEKT {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DateCalculatorParser : Parser {
	public const int
		Dot=1, Add=2, Subtract=3, Slash=4, Separator=5, WhiteSpace=6, NewLine=7, 
		Zero_dwaczt=8, DZIEN=9, MIESIAC=10, ROK=11, MINUTY=12, LICZBA_DNI=13;
	public const int
		RULE_expression = 0, RULE_operation = 1, RULE_datetime = 2, RULE_date = 3, 
		RULE_timespan = 4, RULE_dzien = 5, RULE_liczba_dni = 6, RULE_miesiac = 7, 
		RULE_rok = 8, RULE_godziny = 9, RULE_minuty = 10, RULE_sekundy = 11;
	public static readonly string[] ruleNames = {
		"expression", "operation", "datetime", "date", "timespan", "dzien", "liczba_dni", 
		"miesiac", "rok", "godziny", "minuty", "sekundy"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'+'", "'-'", "'/'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Dot", "Add", "Subtract", "Slash", "Separator", "WhiteSpace", "NewLine", 
		"Zero_dwaczt", "DZIEN", "MIESIAC", "ROK", "MINUTY", "LICZBA_DNI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DateCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DateCalculatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			State = 28;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; date();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; datetime();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26; timespan();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 27; operation(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
	 
		public OperationContext() { }
		public virtual void CopyFrom(OperationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AaaContext : OperationContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public AaaContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterAaa(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitAaa(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAaa(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddDateContext : OperationContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode Add() { return GetToken(DateCalculatorParser.Add, 0); }
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public AddDateContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterAddDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitAddDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubTimeSpanContext : OperationContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode Subtract() { return GetToken(DateCalculatorParser.Subtract, 0); }
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public SubTimeSpanContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterSubTimeSpan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitSubTimeSpan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubTimeSpan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddTimeSpanContext : OperationContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode Add() { return GetToken(DateCalculatorParser.Add, 0); }
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public AddTimeSpanContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterAddTimeSpan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitAddTimeSpan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddTimeSpan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DdddContext : OperationContext {
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public DdddContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDddd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDddd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDddd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CcccccccContext : OperationContext {
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public CcccccccContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterCccccccc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitCccccccc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCccccccc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubDateContext : OperationContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode Subtract() { return GetToken(DateCalculatorParser.Subtract, 0); }
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public SubDateContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterSubDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitSubDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		return operation(0);
	}

	private OperationContext operation(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		OperationContext _localctx = new OperationContext(_ctx, _parentState);
		OperationContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_operation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				_localctx = new AaaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 31; date();
				}
				break;

			case 2:
				{
				_localctx = new DdddContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 32; datetime();
				}
				break;

			case 3:
				{
				_localctx = new CcccccccContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 33; timespan();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 64;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 62;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
					case 1:
						{
						_localctx = new AddDateContext(new OperationContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 36;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 37; Match(Add);
						State = 41;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
						case 1:
							{
							State = 38; date();
							}
							break;

						case 2:
							{
							State = 39; datetime();
							}
							break;

						case 3:
							{
							State = 40; operation(0);
							}
							break;
						}
						}
						break;

					case 2:
						{
						_localctx = new AddTimeSpanContext(new OperationContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 43;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 44; Match(Add);
						State = 47;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							State = 45; timespan();
							}
							break;

						case 2:
							{
							State = 46; operation(0);
							}
							break;
						}
						}
						break;

					case 3:
						{
						_localctx = new SubDateContext(new OperationContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 49;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 50; Match(Subtract);
						State = 54;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
						case 1:
							{
							State = 51; date();
							}
							break;

						case 2:
							{
							State = 52; datetime();
							}
							break;

						case 3:
							{
							State = 53; operation(0);
							}
							break;
						}
						}
						break;

					case 4:
						{
						_localctx = new SubTimeSpanContext(new OperationContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 56;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 57; Match(Subtract);
						State = 60;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
						case 1:
							{
							State = 58; timespan();
							}
							break;

						case 2:
							{
							State = 59; operation(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 66;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DatetimeContext : ParserRuleContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public GodzinyContext godziny() {
			return GetRuleContext<GodzinyContext>(0);
		}
		public MinutyContext minuty() {
			return GetRuleContext<MinutyContext>(0);
		}
		public SekundyContext sekundy() {
			return GetRuleContext<SekundyContext>(0);
		}
		public ITerminalNode[] Separator() { return GetTokens(DateCalculatorParser.Separator); }
		public ITerminalNode Separator(int i) {
			return GetToken(DateCalculatorParser.Separator, i);
		}
		public ITerminalNode[] Dot() { return GetTokens(DateCalculatorParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(DateCalculatorParser.Dot, i);
		}
		public DatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDatetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDatetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeContext datetime() {
		DatetimeContext _localctx = new DatetimeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_datetime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; date();
			State = 68; godziny();
			State = 69;
			_la = _input.La(1);
			if ( !(_la==Dot || _la==Separator) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 70; minuty();
			State = 71;
			_la = _input.La(1);
			if ( !(_la==Dot || _la==Separator) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 72; sekundy();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public DzienContext dzien() {
			return GetRuleContext<DzienContext>(0);
		}
		public MiesiacContext miesiac() {
			return GetRuleContext<MiesiacContext>(0);
		}
		public RokContext rok() {
			return GetRuleContext<RokContext>(0);
		}
		public ITerminalNode[] Dot() { return GetTokens(DateCalculatorParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(DateCalculatorParser.Dot, i);
		}
		public ITerminalNode[] Slash() { return GetTokens(DateCalculatorParser.Slash); }
		public ITerminalNode Slash(int i) {
			return GetToken(DateCalculatorParser.Slash, i);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_date);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; dzien();
			State = 75;
			_la = _input.La(1);
			if ( !(_la==Dot || _la==Slash) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 76; miesiac();
			State = 77;
			_la = _input.La(1);
			if ( !(_la==Dot || _la==Slash) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 78; rok();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimespanContext : ParserRuleContext {
		public GodzinyContext godziny() {
			return GetRuleContext<GodzinyContext>(0);
		}
		public MinutyContext minuty() {
			return GetRuleContext<MinutyContext>(0);
		}
		public SekundyContext sekundy() {
			return GetRuleContext<SekundyContext>(0);
		}
		public ITerminalNode[] Separator() { return GetTokens(DateCalculatorParser.Separator); }
		public ITerminalNode Separator(int i) {
			return GetToken(DateCalculatorParser.Separator, i);
		}
		public ITerminalNode[] Dot() { return GetTokens(DateCalculatorParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(DateCalculatorParser.Dot, i);
		}
		public Liczba_dniContext liczba_dni() {
			return GetRuleContext<Liczba_dniContext>(0);
		}
		public TimespanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timespan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimespanContext timespan() {
		TimespanContext _localctx = new TimespanContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_timespan);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 80; liczba_dni();
				State = 81; Match(Dot);
				}
				break;
			}
			State = 85; godziny();
			State = 86;
			_la = _input.La(1);
			if ( !(_la==Dot || _la==Separator) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 87; minuty();
			State = 88;
			_la = _input.La(1);
			if ( !(_la==Dot || _la==Separator) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 89; sekundy();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DzienContext : ParserRuleContext {
		public ITerminalNode DZIEN() { return GetToken(DateCalculatorParser.DZIEN, 0); }
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public DzienContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dzien; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDzien(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDzien(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDzien(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DzienContext dzien() {
		DzienContext _localctx = new DzienContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_dzien);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = _input.La(1);
			if ( !(_la==Zero_dwaczt || _la==DZIEN) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Liczba_dniContext : ParserRuleContext {
		public ITerminalNode LICZBA_DNI() { return GetToken(DateCalculatorParser.LICZBA_DNI, 0); }
		public DzienContext dzien() {
			return GetRuleContext<DzienContext>(0);
		}
		public ITerminalNode MINUTY() { return GetToken(DateCalculatorParser.MINUTY, 0); }
		public ITerminalNode ROK() { return GetToken(DateCalculatorParser.ROK, 0); }
		public Liczba_dniContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_liczba_dni; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterLiczba_dni(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitLiczba_dni(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiczba_dni(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Liczba_dniContext liczba_dni() {
		Liczba_dniContext _localctx = new Liczba_dniContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_liczba_dni);
		try {
			State = 97;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LICZBA_DNI:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; Match(LICZBA_DNI);
				}
				break;
			case Zero_dwaczt:
			case DZIEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; dzien();
				}
				break;
			case MINUTY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; Match(MINUTY);
				}
				break;
			case ROK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; Match(ROK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiesiacContext : ParserRuleContext {
		public ITerminalNode MIESIAC() { return GetToken(DateCalculatorParser.MIESIAC, 0); }
		public MiesiacContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_miesiac; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterMiesiac(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitMiesiac(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMiesiac(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MiesiacContext miesiac() {
		MiesiacContext _localctx = new MiesiacContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_miesiac);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(MIESIAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RokContext : ParserRuleContext {
		public ITerminalNode ROK() { return GetToken(DateCalculatorParser.ROK, 0); }
		public RokContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rok; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterRok(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitRok(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRok(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RokContext rok() {
		RokContext _localctx = new RokContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_rok);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(ROK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GodzinyContext : ParserRuleContext {
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public GodzinyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_godziny; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterGodziny(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitGodziny(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGodziny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GodzinyContext godziny() {
		GodzinyContext _localctx = new GodzinyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_godziny);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(Zero_dwaczt);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinutyContext : ParserRuleContext {
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public ITerminalNode DZIEN() { return GetToken(DateCalculatorParser.DZIEN, 0); }
		public ITerminalNode MINUTY() { return GetToken(DateCalculatorParser.MINUTY, 0); }
		public MinutyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minuty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterMinuty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitMinuty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinuty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinutyContext minuty() {
		MinutyContext _localctx = new MinutyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_minuty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Zero_dwaczt) | (1L << DZIEN) | (1L << MINUTY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SekundyContext : ParserRuleContext {
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public ITerminalNode DZIEN() { return GetToken(DateCalculatorParser.DZIEN, 0); }
		public ITerminalNode MINUTY() { return GetToken(DateCalculatorParser.MINUTY, 0); }
		public SekundyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sekundy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterSekundy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitSekundy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSekundy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SekundyContext sekundy() {
		SekundyContext _localctx = new SekundyContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_sekundy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Zero_dwaczt) | (1L << DZIEN) | (1L << MINUTY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return operation_sempred((OperationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool operation_sempred(OperationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 7);

		case 1: return Precpred(_ctx, 6);

		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xFp\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x1F"+
		"\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3%\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3,\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x32\n\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\x39\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3?\n\x3\a\x3\x41"+
		"\n\x3\f\x3\xE\x3\x44\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x5\x6V\n\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b\x64"+
		"\n\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x2\x2\x3\x4"+
		"\xE\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x2\x6\x4\x2\x3\x3\a\a\x4\x2\x3\x3\x6\x6\x3\x2\n\v\x4\x2\n\v\xE"+
		"\xEv\x2\x1E\x3\x2\x2\x2\x4$\x3\x2\x2\x2\x6\x45\x3\x2\x2\x2\bL\x3\x2\x2"+
		"\x2\nU\x3\x2\x2\x2\f]\x3\x2\x2\x2\xE\x63\x3\x2\x2\x2\x10\x65\x3\x2\x2"+
		"\x2\x12g\x3\x2\x2\x2\x14i\x3\x2\x2\x2\x16k\x3\x2\x2\x2\x18m\x3\x2\x2\x2"+
		"\x1A\x1F\x5\b\x5\x2\x1B\x1F\x5\x6\x4\x2\x1C\x1F\x5\n\x6\x2\x1D\x1F\x5"+
		"\x4\x3\x2\x1E\x1A\x3\x2\x2\x2\x1E\x1B\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2"+
		"\x1E\x1D\x3\x2\x2\x2\x1F\x3\x3\x2\x2\x2 !\b\x3\x1\x2!%\x5\b\x5\x2\"%\x5"+
		"\x6\x4\x2#%\x5\n\x6\x2$ \x3\x2\x2\x2$\"\x3\x2\x2\x2$#\x3\x2\x2\x2%\x42"+
		"\x3\x2\x2\x2&\'\f\t\x2\x2\'+\a\x4\x2\x2(,\x5\b\x5\x2),\x5\x6\x4\x2*,\x5"+
		"\x4\x3\x2+(\x3\x2\x2\x2+)\x3\x2\x2\x2+*\x3\x2\x2\x2,\x41\x3\x2\x2\x2-"+
		".\f\b\x2\x2.\x31\a\x4\x2\x2/\x32\x5\n\x6\x2\x30\x32\x5\x4\x3\x2\x31/\x3"+
		"\x2\x2\x2\x31\x30\x3\x2\x2\x2\x32\x41\x3\x2\x2\x2\x33\x34\f\a\x2\x2\x34"+
		"\x38\a\x5\x2\x2\x35\x39\x5\b\x5\x2\x36\x39\x5\x6\x4\x2\x37\x39\x5\x4\x3"+
		"\x2\x38\x35\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x37\x3\x2\x2\x2\x39\x41"+
		"\x3\x2\x2\x2:;\f\x6\x2\x2;>\a\x5\x2\x2<?\x5\n\x6\x2=?\x5\x4\x3\x2><\x3"+
		"\x2\x2\x2>=\x3\x2\x2\x2?\x41\x3\x2\x2\x2@&\x3\x2\x2\x2@-\x3\x2\x2\x2@"+
		"\x33\x3\x2\x2\x2@:\x3\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42"+
		"\x43\x3\x2\x2\x2\x43\x5\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46\x5\b\x5"+
		"\x2\x46G\x5\x14\v\x2GH\t\x2\x2\x2HI\x5\x16\f\x2IJ\t\x2\x2\x2JK\x5\x18"+
		"\r\x2K\a\x3\x2\x2\x2LM\x5\f\a\x2MN\t\x3\x2\x2NO\x5\x10\t\x2OP\t\x3\x2"+
		"\x2PQ\x5\x12\n\x2Q\t\x3\x2\x2\x2RS\x5\xE\b\x2ST\a\x3\x2\x2TV\x3\x2\x2"+
		"\x2UR\x3\x2\x2\x2UV\x3\x2\x2\x2VW\x3\x2\x2\x2WX\x5\x14\v\x2XY\t\x2\x2"+
		"\x2YZ\x5\x16\f\x2Z[\t\x2\x2\x2[\\\x5\x18\r\x2\\\v\x3\x2\x2\x2]^\t\x4\x2"+
		"\x2^\r\x3\x2\x2\x2_\x64\a\xF\x2\x2`\x64\x5\f\a\x2\x61\x64\a\xE\x2\x2\x62"+
		"\x64\a\r\x2\x2\x63_\x3\x2\x2\x2\x63`\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63"+
		"\x62\x3\x2\x2\x2\x64\xF\x3\x2\x2\x2\x65\x66\a\f\x2\x2\x66\x11\x3\x2\x2"+
		"\x2gh\a\r\x2\x2h\x13\x3\x2\x2\x2ij\a\n\x2\x2j\x15\x3\x2\x2\x2kl\t\x5\x2"+
		"\x2l\x17\x3\x2\x2\x2mn\t\x5\x2\x2n\x19\x3\x2\x2\x2\f\x1E$+\x31\x38>@\x42"+
		"U\x63";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace JFK_PROJEKT
