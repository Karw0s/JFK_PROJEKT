//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Karwos\documents\visual studio 2015\Projects\JFK_PROJEKT\JFK_PROJEKT\DateCalculator.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JFK_PROJEKT {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DateCalculatorParser : Parser {
	public const int
		T__0=1, T__1=2, DOT=3, Add=4, Subtract=5, Slash=6, Separator=7, WhiteSpace=8, 
		NewLine=9, Zero_dwaczt=10, DZIEN=11, MIESIAC=12, ROK=13, MINUTY=14, LICZBA_DNI=15;
	public const int
		RULE_expression = 0, RULE_operation = 1, RULE_datetime = 2, RULE_date = 3, 
		RULE_timespan = 4, RULE_dzien = 5, RULE_liczba_dni = 6, RULE_miesiac = 7, 
		RULE_rok = 8, RULE_godziny = 9, RULE_minuty = 10, RULE_sekundy = 11;
	public static readonly string[] ruleNames = {
		"expression", "operation", "datetime", "date", "timespan", "dzien", "liczba_dni", 
		"miesiac", "rok", "godziny", "minuty", "sekundy"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'+'", "'-'", "'/'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "DOT", "Add", "Subtract", "Slash", "Separator", "WhiteSpace", 
		"NewLine", "Zero_dwaczt", "DZIEN", "MIESIAC", "ROK", "MINUTY", "LICZBA_DNI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DateCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DateCalculatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			State = 28;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; date();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; datetime();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26; timespan();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 27; operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
	 
		public OperationContext() { }
		public virtual void CopyFrom(OperationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimespanAddTimespanContext : OperationContext {
		public IToken op;
		public TimespanContext[] timespan() {
			return GetRuleContexts<TimespanContext>();
		}
		public TimespanContext timespan(int i) {
			return GetRuleContext<TimespanContext>(i);
		}
		public ITerminalNode Add() { return GetToken(DateCalculatorParser.Add, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public TimespanAddTimespanContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterTimespanAddTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitTimespanAddTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimespanAddTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimespanAddDateContext : OperationContext {
		public IToken op;
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public ITerminalNode Add() { return GetToken(DateCalculatorParser.Add, 0); }
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public TimespanAddDateContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterTimespanAddDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitTimespanAddDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimespanAddDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateSubDateContext : OperationContext {
		public IToken op;
		public ITerminalNode Subtract() { return GetToken(DateCalculatorParser.Subtract, 0); }
		public DateContext[] date() {
			return GetRuleContexts<DateContext>();
		}
		public DateContext date(int i) {
			return GetRuleContext<DateContext>(i);
		}
		public DatetimeContext[] datetime() {
			return GetRuleContexts<DatetimeContext>();
		}
		public DatetimeContext datetime(int i) {
			return GetRuleContext<DatetimeContext>(i);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public DateSubDateContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDateSubDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDateSubDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateSubDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateSubTimespanContext : OperationContext {
		public IToken op;
		public ITerminalNode Subtract() { return GetToken(DateCalculatorParser.Subtract, 0); }
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public DateSubTimespanContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDateSubTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDateSubTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateSubTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperContext : OperationContext {
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public OperContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterOper(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitOper(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOper(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateAddTimespanContext : OperationContext {
		public IToken op;
		public ITerminalNode Add() { return GetToken(DateCalculatorParser.Add, 0); }
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public DateAddTimespanContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDateAddTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDateAddTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateAddTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimespanSubTimespanContext : OperationContext {
		public IToken op;
		public TimespanContext[] timespan() {
			return GetRuleContexts<TimespanContext>();
		}
		public TimespanContext timespan(int i) {
			return GetRuleContext<TimespanContext>(i);
		}
		public ITerminalNode Subtract() { return GetToken(DateCalculatorParser.Subtract, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public TimespanSubTimespanContext(OperationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterTimespanSubTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitTimespanSubTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimespanSubTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_operation);
		try {
			State = 81;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				_localctx = new DateAddTimespanContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 30; date();
					}
					break;

				case 2:
					{
					State = 31; datetime();
					}
					break;
				}
				State = 34; ((DateAddTimespanContext)_localctx).op = Match(Add);
				State = 37;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 35; timespan();
					}
					break;

				case 2:
					{
					State = 36; operation();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new TimespanAddTimespanContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; timespan();
				State = 40; ((TimespanAddTimespanContext)_localctx).op = Match(Add);
				State = 43;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 41; timespan();
					}
					break;

				case 2:
					{
					State = 42; operation();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new TimespanAddDateContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; timespan();
				State = 46; ((TimespanAddDateContext)_localctx).op = Match(Add);
				State = 50;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
				case 1:
					{
					State = 47; date();
					}
					break;

				case 2:
					{
					State = 48; datetime();
					}
					break;

				case 3:
					{
					State = 49; operation();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new DateSubTimespanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 52; date();
					}
					break;

				case 2:
					{
					State = 53; datetime();
					}
					break;
				}
				State = 56; ((DateSubTimespanContext)_localctx).op = Match(Subtract);
				State = 59;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 57; timespan();
					}
					break;

				case 2:
					{
					State = 58; operation();
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new TimespanSubTimespanContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 61; timespan();
				State = 62; ((TimespanSubTimespanContext)_localctx).op = Match(Subtract);
				State = 65;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					State = 63; timespan();
					}
					break;

				case 2:
					{
					State = 64; operation();
					}
					break;
				}
				}
				break;

			case 6:
				_localctx = new DateSubDateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 69;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 67; date();
					}
					break;

				case 2:
					{
					State = 68; datetime();
					}
					break;
				}
				State = 71; ((DateSubDateContext)_localctx).op = Match(Subtract);
				State = 75;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					State = 72; date();
					}
					break;

				case 2:
					{
					State = 73; datetime();
					}
					break;

				case 3:
					{
					State = 74; operation();
					}
					break;
				}
				}
				break;

			case 7:
				_localctx = new OperContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 77; Match(T__0);
				State = 78; operation();
				State = 79; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeContext : ParserRuleContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public GodzinyContext godziny() {
			return GetRuleContext<GodzinyContext>(0);
		}
		public ITerminalNode[] Separator() { return GetTokens(DateCalculatorParser.Separator); }
		public ITerminalNode Separator(int i) {
			return GetToken(DateCalculatorParser.Separator, i);
		}
		public MinutyContext minuty() {
			return GetRuleContext<MinutyContext>(0);
		}
		public SekundyContext sekundy() {
			return GetRuleContext<SekundyContext>(0);
		}
		public DatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDatetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDatetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeContext datetime() {
		DatetimeContext _localctx = new DatetimeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_datetime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; date();
			State = 84; godziny();
			State = 85; Match(Separator);
			State = 86; minuty();
			State = 87; Match(Separator);
			State = 88; sekundy();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public DzienContext dzien() {
			return GetRuleContext<DzienContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(DateCalculatorParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(DateCalculatorParser.DOT, i);
		}
		public MiesiacContext miesiac() {
			return GetRuleContext<MiesiacContext>(0);
		}
		public RokContext rok() {
			return GetRuleContext<RokContext>(0);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; dzien();
			State = 91; Match(DOT);
			State = 92; miesiac();
			State = 93; Match(DOT);
			State = 94; rok();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimespanContext : ParserRuleContext {
		public Liczba_dniContext liczba_dni() {
			return GetRuleContext<Liczba_dniContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(DateCalculatorParser.DOT, 0); }
		public GodzinyContext godziny() {
			return GetRuleContext<GodzinyContext>(0);
		}
		public ITerminalNode[] Separator() { return GetTokens(DateCalculatorParser.Separator); }
		public ITerminalNode Separator(int i) {
			return GetToken(DateCalculatorParser.Separator, i);
		}
		public MinutyContext minuty() {
			return GetRuleContext<MinutyContext>(0);
		}
		public SekundyContext sekundy() {
			return GetRuleContext<SekundyContext>(0);
		}
		public TimespanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timespan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimespanContext timespan() {
		TimespanContext _localctx = new TimespanContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_timespan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; liczba_dni();
			State = 97; Match(DOT);
			State = 98; godziny();
			State = 99; Match(Separator);
			State = 100; minuty();
			State = 101; Match(Separator);
			State = 102; sekundy();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DzienContext : ParserRuleContext {
		public ITerminalNode DZIEN() { return GetToken(DateCalculatorParser.DZIEN, 0); }
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public DzienContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dzien; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDzien(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDzien(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDzien(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DzienContext dzien() {
		DzienContext _localctx = new DzienContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_dzien);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_la = _input.La(1);
			if ( !(_la==Zero_dwaczt || _la==DZIEN) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Liczba_dniContext : ParserRuleContext {
		public ITerminalNode LICZBA_DNI() { return GetToken(DateCalculatorParser.LICZBA_DNI, 0); }
		public DzienContext dzien() {
			return GetRuleContext<DzienContext>(0);
		}
		public ITerminalNode MINUTY() { return GetToken(DateCalculatorParser.MINUTY, 0); }
		public ITerminalNode ROK() { return GetToken(DateCalculatorParser.ROK, 0); }
		public Liczba_dniContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_liczba_dni; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterLiczba_dni(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitLiczba_dni(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiczba_dni(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Liczba_dniContext liczba_dni() {
		Liczba_dniContext _localctx = new Liczba_dniContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_liczba_dni);
		try {
			State = 110;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LICZBA_DNI:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106; Match(LICZBA_DNI);
				}
				break;
			case Zero_dwaczt:
			case DZIEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; dzien();
				}
				break;
			case MINUTY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108; Match(MINUTY);
				}
				break;
			case ROK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 109; Match(ROK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiesiacContext : ParserRuleContext {
		public ITerminalNode MIESIAC() { return GetToken(DateCalculatorParser.MIESIAC, 0); }
		public MiesiacContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_miesiac; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterMiesiac(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitMiesiac(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMiesiac(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MiesiacContext miesiac() {
		MiesiacContext _localctx = new MiesiacContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_miesiac);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(MIESIAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RokContext : ParserRuleContext {
		public ITerminalNode ROK() { return GetToken(DateCalculatorParser.ROK, 0); }
		public RokContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rok; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterRok(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitRok(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRok(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RokContext rok() {
		RokContext _localctx = new RokContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_rok);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(ROK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GodzinyContext : ParserRuleContext {
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public GodzinyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_godziny; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterGodziny(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitGodziny(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGodziny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GodzinyContext godziny() {
		GodzinyContext _localctx = new GodzinyContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_godziny);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(Zero_dwaczt);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinutyContext : ParserRuleContext {
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public ITerminalNode DZIEN() { return GetToken(DateCalculatorParser.DZIEN, 0); }
		public ITerminalNode MINUTY() { return GetToken(DateCalculatorParser.MINUTY, 0); }
		public MinutyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minuty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterMinuty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitMinuty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinuty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinutyContext minuty() {
		MinutyContext _localctx = new MinutyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_minuty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Zero_dwaczt) | (1L << DZIEN) | (1L << MINUTY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SekundyContext : ParserRuleContext {
		public ITerminalNode Zero_dwaczt() { return GetToken(DateCalculatorParser.Zero_dwaczt, 0); }
		public ITerminalNode DZIEN() { return GetToken(DateCalculatorParser.DZIEN, 0); }
		public ITerminalNode MINUTY() { return GetToken(DateCalculatorParser.MINUTY, 0); }
		public SekundyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sekundy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterSekundy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitSekundy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSekundy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SekundyContext sekundy() {
		SekundyContext _localctx = new SekundyContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_sekundy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Zero_dwaczt) | (1L << DZIEN) | (1L << MINUTY))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11}\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x1F"+
		"\n\x2\x3\x3\x3\x3\x5\x3#\n\x3\x3\x3\x3\x3\x3\x3\x5\x3(\n\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3.\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x35\n\x3"+
		"\x3\x3\x3\x3\x5\x3\x39\n\x3\x3\x3\x3\x3\x3\x3\x5\x3>\n\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\x44\n\x3\x3\x3\x3\x3\x5\x3H\n\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3N\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3T\n\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3"+
		"\b\x5\bq\n\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x2"+
		"\x2\x2\xE\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x2\x4\x3\x2\f\r\x4\x2\f\r\x10\x10\x87\x2\x1E\x3\x2\x2\x2"+
		"\x4S\x3\x2\x2\x2\x6U\x3\x2\x2\x2\b\\\x3\x2\x2\x2\n\x62\x3\x2\x2\x2\fj"+
		"\x3\x2\x2\x2\xEp\x3\x2\x2\x2\x10r\x3\x2\x2\x2\x12t\x3\x2\x2\x2\x14v\x3"+
		"\x2\x2\x2\x16x\x3\x2\x2\x2\x18z\x3\x2\x2\x2\x1A\x1F\x5\b\x5\x2\x1B\x1F"+
		"\x5\x6\x4\x2\x1C\x1F\x5\n\x6\x2\x1D\x1F\x5\x4\x3\x2\x1E\x1A\x3\x2\x2\x2"+
		"\x1E\x1B\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1E\x1D\x3\x2\x2\x2\x1F\x3\x3"+
		"\x2\x2\x2 #\x5\b\x5\x2!#\x5\x6\x4\x2\" \x3\x2\x2\x2\"!\x3\x2\x2\x2#$\x3"+
		"\x2\x2\x2$\'\a\x6\x2\x2%(\x5\n\x6\x2&(\x5\x4\x3\x2\'%\x3\x2\x2\x2\'&\x3"+
		"\x2\x2\x2(T\x3\x2\x2\x2)*\x5\n\x6\x2*-\a\x6\x2\x2+.\x5\n\x6\x2,.\x5\x4"+
		"\x3\x2-+\x3\x2\x2\x2-,\x3\x2\x2\x2.T\x3\x2\x2\x2/\x30\x5\n\x6\x2\x30\x34"+
		"\a\x6\x2\x2\x31\x35\x5\b\x5\x2\x32\x35\x5\x6\x4\x2\x33\x35\x5\x4\x3\x2"+
		"\x34\x31\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x33\x3\x2\x2\x2\x35T\x3\x2"+
		"\x2\x2\x36\x39\x5\b\x5\x2\x37\x39\x5\x6\x4\x2\x38\x36\x3\x2\x2\x2\x38"+
		"\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:=\a\a\x2\x2;>\x5\n\x6\x2<>\x5\x4\x3"+
		"\x2=;\x3\x2\x2\x2=<\x3\x2\x2\x2>T\x3\x2\x2\x2?@\x5\n\x6\x2@\x43\a\a\x2"+
		"\x2\x41\x44\x5\n\x6\x2\x42\x44\x5\x4\x3\x2\x43\x41\x3\x2\x2\x2\x43\x42"+
		"\x3\x2\x2\x2\x44T\x3\x2\x2\x2\x45H\x5\b\x5\x2\x46H\x5\x6\x4\x2G\x45\x3"+
		"\x2\x2\x2G\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IM\a\a\x2\x2JN\x5\b\x5\x2KN\x5"+
		"\x6\x4\x2LN\x5\x4\x3\x2MJ\x3\x2\x2\x2MK\x3\x2\x2\x2ML\x3\x2\x2\x2NT\x3"+
		"\x2\x2\x2OP\a\x3\x2\x2PQ\x5\x4\x3\x2QR\a\x4\x2\x2RT\x3\x2\x2\x2S\"\x3"+
		"\x2\x2\x2S)\x3\x2\x2\x2S/\x3\x2\x2\x2S\x38\x3\x2\x2\x2S?\x3\x2\x2\x2S"+
		"G\x3\x2\x2\x2SO\x3\x2\x2\x2T\x5\x3\x2\x2\x2UV\x5\b\x5\x2VW\x5\x14\v\x2"+
		"WX\a\t\x2\x2XY\x5\x16\f\x2YZ\a\t\x2\x2Z[\x5\x18\r\x2[\a\x3\x2\x2\x2\\"+
		"]\x5\f\a\x2]^\a\x5\x2\x2^_\x5\x10\t\x2_`\a\x5\x2\x2`\x61\x5\x12\n\x2\x61"+
		"\t\x3\x2\x2\x2\x62\x63\x5\xE\b\x2\x63\x64\a\x5\x2\x2\x64\x65\x5\x14\v"+
		"\x2\x65\x66\a\t\x2\x2\x66g\x5\x16\f\x2gh\a\t\x2\x2hi\x5\x18\r\x2i\v\x3"+
		"\x2\x2\x2jk\t\x2\x2\x2k\r\x3\x2\x2\x2lq\a\x11\x2\x2mq\x5\f\a\x2nq\a\x10"+
		"\x2\x2oq\a\xF\x2\x2pl\x3\x2\x2\x2pm\x3\x2\x2\x2pn\x3\x2\x2\x2po\x3\x2"+
		"\x2\x2q\xF\x3\x2\x2\x2rs\a\xE\x2\x2s\x11\x3\x2\x2\x2tu\a\xF\x2\x2u\x13"+
		"\x3\x2\x2\x2vw\a\f\x2\x2w\x15\x3\x2\x2\x2xy\t\x3\x2\x2y\x17\x3\x2\x2\x2"+
		"z{\t\x3\x2\x2{\x19\x3\x2\x2\x2\xE\x1E\"\'-\x34\x38=\x43GMSp";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace JFK_PROJEKT
