//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Karwos\Documents\Visual Studio 2015\Projects\JFK_PROJEKT\JFK_PROJEKT\DateCalculator.g4 by ANTLR 4.6.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JFK_PROJEKT {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DateCalculatorParser : Parser {
	public const int
		T__0=1, T__1=2, Add=3, Subtract=4, Slash=5, WhiteSpace=6, NewLine=7, Date=8, 
		Timespan=9, DZIEN=10, MIESIAC=11, ROK=12;
	public const int
		RULE_dzien = 0, RULE_miesiac = 1, RULE_rok = 2, RULE_datetime = 3, RULE_timespan = 4, 
		RULE_date = 5, RULE_operation = 6, RULE_expression = 7;
	public static readonly string[] ruleNames = {
		"dzien", "miesiac", "rok", "datetime", "timespan", "date", "operation", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Add", "Subtract", "Slash", "WhiteSpace", "NewLine", 
		"Date", "Timespan", "DZIEN", "MIESIAC", "ROK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DateCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DateCalculatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DzienContext : ParserRuleContext {
		public ITerminalNode DZIEN() { return GetToken(DateCalculatorParser.DZIEN, 0); }
		public DzienContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dzien; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDzien(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDzien(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDzien(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DzienContext dzien() {
		DzienContext _localctx = new DzienContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_dzien);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; Match(DZIEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiesiacContext : ParserRuleContext {
		public ITerminalNode MIESIAC() { return GetToken(DateCalculatorParser.MIESIAC, 0); }
		public MiesiacContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_miesiac; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterMiesiac(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitMiesiac(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMiesiac(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MiesiacContext miesiac() {
		MiesiacContext _localctx = new MiesiacContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_miesiac);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(MIESIAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RokContext : ParserRuleContext {
		public ITerminalNode ROK() { return GetToken(DateCalculatorParser.ROK, 0); }
		public RokContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rok; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterRok(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitRok(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRok(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RokContext rok() {
		RokContext _localctx = new RokContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_rok);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(ROK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeContext : ParserRuleContext {
		public ITerminalNode Date() { return GetToken(DateCalculatorParser.Date, 0); }
		public ITerminalNode Timespan() { return GetToken(DateCalculatorParser.Timespan, 0); }
		public DatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDatetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDatetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeContext datetime() {
		DatetimeContext _localctx = new DatetimeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_datetime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(Date);
			State = 23; Match(Timespan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimespanContext : ParserRuleContext {
		public ITerminalNode Timespan() { return GetToken(DateCalculatorParser.Timespan, 0); }
		public TimespanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timespan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterTimespan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitTimespan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimespan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimespanContext timespan() {
		TimespanContext _localctx = new TimespanContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_timespan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(Timespan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public DzienContext dzien() {
			return GetRuleContext<DzienContext>(0);
		}
		public ITerminalNode[] Slash() { return GetTokens(DateCalculatorParser.Slash); }
		public ITerminalNode Slash(int i) {
			return GetToken(DateCalculatorParser.Slash, i);
		}
		public MiesiacContext miesiac() {
			return GetRuleContext<MiesiacContext>(0);
		}
		public RokContext rok() {
			return GetRuleContext<RokContext>(0);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_date);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; dzien();
			State = 28; Match(Slash);
			State = 29; miesiac();
			State = 30; Match(Slash);
			State = 31; rok();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public IToken op;
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode Subtract() { return GetToken(DateCalculatorParser.Subtract, 0); }
		public DateContext[] date() {
			return GetRuleContexts<DateContext>();
		}
		public DateContext date(int i) {
			return GetRuleContext<DateContext>(i);
		}
		public DatetimeContext[] datetime() {
			return GetRuleContexts<DatetimeContext>();
		}
		public DatetimeContext datetime(int i) {
			return GetRuleContext<DatetimeContext>(i);
		}
		public TimespanContext[] timespan() {
			return GetRuleContexts<TimespanContext>();
		}
		public TimespanContext timespan(int i) {
			return GetRuleContext<TimespanContext>(i);
		}
		public ITerminalNode Add() { return GetToken(DateCalculatorParser.Add, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_operation);
		int _la;
		try {
			State = 64;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; Match(T__0);
				State = 34; operation();
				State = 35; Match(T__1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DZIEN:
					{
					State = 37; date();
					}
					break;
				case Date:
					{
					State = 38; datetime();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 41; _localctx.op = Match(Subtract);
				State = 45;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 42; date();
					}
					break;

				case 2:
					{
					State = 43; datetime();
					}
					break;

				case 3:
					{
					State = 44; operation();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DZIEN:
					{
					State = 47; date();
					}
					break;
				case Date:
					{
					State = 48; datetime();
					}
					break;
				case Timespan:
					{
					State = 49; timespan();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 52;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Add || _la==Subtract) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 55;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 53; timespan();
					}
					break;

				case 2:
					{
					State = 54; operation();
					}
					break;
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57; timespan();
				State = 58; _localctx.op = Match(Add);
				State = 62;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
				case 1:
					{
					State = 59; date();
					}
					break;

				case 2:
					{
					State = 60; datetime();
					}
					break;

				case 3:
					{
					State = 61; operation();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public TimespanContext timespan() {
			return GetRuleContext<TimespanContext>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDateCalculatorListener typedListener = listener as IDateCalculatorListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDateCalculatorVisitor<TResult> typedVisitor = visitor as IDateCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_expression);
		try {
			State = 71;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; date();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; datetime();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; timespan();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70; operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xEL\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b*\n\b\x3"+
		"\b\x3\b\x3\b\x3\b\x5\b\x30\n\b\x3\b\x3\b\x3\b\x5\b\x35\n\b\x3\b\x3\b\x3"+
		"\b\x5\b:\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x41\n\b\x5\b\x43\n\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\tJ\n\t\x3\t\x2\x2\x2\n\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x2\x3\x3\x2\x5\x6R\x2\x12\x3\x2\x2\x2\x4\x14\x3\x2"+
		"\x2\x2\x6\x16\x3\x2\x2\x2\b\x18\x3\x2\x2\x2\n\x1B\x3\x2\x2\x2\f\x1D\x3"+
		"\x2\x2\x2\xE\x42\x3\x2\x2\x2\x10I\x3\x2\x2\x2\x12\x13\a\f\x2\x2\x13\x3"+
		"\x3\x2\x2\x2\x14\x15\a\r\x2\x2\x15\x5\x3\x2\x2\x2\x16\x17\a\xE\x2\x2\x17"+
		"\a\x3\x2\x2\x2\x18\x19\a\n\x2\x2\x19\x1A\a\v\x2\x2\x1A\t\x3\x2\x2\x2\x1B"+
		"\x1C\a\v\x2\x2\x1C\v\x3\x2\x2\x2\x1D\x1E\x5\x2\x2\x2\x1E\x1F\a\a\x2\x2"+
		"\x1F \x5\x4\x3\x2 !\a\a\x2\x2!\"\x5\x6\x4\x2\"\r\x3\x2\x2\x2#$\a\x3\x2"+
		"\x2$%\x5\xE\b\x2%&\a\x4\x2\x2&\x43\x3\x2\x2\x2\'*\x5\f\a\x2(*\x5\b\x5"+
		"\x2)\'\x3\x2\x2\x2)(\x3\x2\x2\x2*+\x3\x2\x2\x2+/\a\x6\x2\x2,\x30\x5\f"+
		"\a\x2-\x30\x5\b\x5\x2.\x30\x5\xE\b\x2/,\x3\x2\x2\x2/-\x3\x2\x2\x2/.\x3"+
		"\x2\x2\x2\x30\x43\x3\x2\x2\x2\x31\x35\x5\f\a\x2\x32\x35\x5\b\x5\x2\x33"+
		"\x35\x5\n\x6\x2\x34\x31\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x33\x3\x2"+
		"\x2\x2\x35\x36\x3\x2\x2\x2\x36\x39\t\x2\x2\x2\x37:\x5\n\x6\x2\x38:\x5"+
		"\xE\b\x2\x39\x37\x3\x2\x2\x2\x39\x38\x3\x2\x2\x2:\x43\x3\x2\x2\x2;<\x5"+
		"\n\x6\x2<@\a\x5\x2\x2=\x41\x5\f\a\x2>\x41\x5\b\x5\x2?\x41\x5\xE\b\x2@"+
		"=\x3\x2\x2\x2@>\x3\x2\x2\x2@?\x3\x2\x2\x2\x41\x43\x3\x2\x2\x2\x42#\x3"+
		"\x2\x2\x2\x42)\x3\x2\x2\x2\x42\x34\x3\x2\x2\x2\x42;\x3\x2\x2\x2\x43\xF"+
		"\x3\x2\x2\x2\x44J\x3\x2\x2\x2\x45J\x5\f\a\x2\x46J\x5\b\x5\x2GJ\x5\n\x6"+
		"\x2HJ\x5\xE\b\x2I\x44\x3\x2\x2\x2I\x45\x3\x2\x2\x2I\x46\x3\x2\x2\x2IG"+
		"\x3\x2\x2\x2IH\x3\x2\x2\x2J\x11\x3\x2\x2\x2\t)/\x34\x39@\x42I";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace JFK_PROJEKT
